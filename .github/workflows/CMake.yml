# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake Build Test

on:
  push:
    branches: [ "main", "v0.2.*" ]
  pull_request:
    branches: [ "main", "v0.2.*" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup env
      run: sudo apt-get update && sudo apt-get install -y gcc-arm-none-eabi gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi g++-arm-linux-gnueabi g++-arm-linux-gnueabihf build-essential libncurses5-dev zlib1g-dev gawk flex bison quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip lsof

    - name: Configure CMake arm-none-eabi
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build-arm-none-eabi -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_BOARD_FILE=tinyvision.cmake

    - name: Build arm-none-eabi
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-arm-none-eabi --config ${{env.BUILD_TYPE}}

    - name: Configure CMake arm-linux-gnueabihf
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build-arm-linux-gnueabihf -DCROSS_COMPILE=arm-linux-gnueabihf- -DCMAKE_BOARD_FILE=tinyvision.cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build arm-linux-gnueabihf
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-arm-linux-gnueabihf --config ${{env.BUILD_TYPE}}

    - name: Configure CMake arm-linux-gnueabi
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build-arm-linux-gnueabi -DCROSS_COMPILE=arm-linux-gnueabi- -DCMAKE_BOARD_FILE=tinyvision.cmake -DENABLE_HARDFP=OFF -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build arm-linux-gnueabi
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-arm-linux-gnueabi --config ${{env.BUILD_TYPE}}

      

